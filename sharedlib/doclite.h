/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


//ConvertToStruct converts a map to an struct passed as s

extern GoInterface ConvertToStruct(GoMap p0, GoInterface p1);

//ConnectDB is same as Connect only used for building shared library

extern void ConnectDB(GoString p0);

//Close is same as Doclite.Close only used for building shared library

extern void Close();

//Base is same as Doclite.Base only used for building shared library

extern void Base();

//Insert is same as Collection.Insert only used for building shared library

extern void Insert(GoString p0, GoString p1);

//DeleteOne is same as Collection.DeleteOne only used for building shared library

extern void DeleteOne(GoInt64 p0, GoString p1);

//Delete is same as Collection.Delete only used for building shared library

extern void Delete(GoString p0, GoString p1);

//FindOne is same as Collection.FindOne only used for building shared library

extern char* FindOne(GoInt64 p0, GoString p1);

//Find is same as Collection.Find only used for building shared library

extern char* Find(GoString p0, GoString p1);

//UpdateOneDoc is same as Collection.UpdateOneDoc only used for building shared library

extern void UpdateOneDoc(GoInt64 p0, GoString p1, GoString p2);

#ifdef __cplusplus
}
#endif
